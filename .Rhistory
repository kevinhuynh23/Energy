}
#the name of the data frame created, whether a state is chosen or National, will be the same
#when national is chosen states are filtered out according to the slider's min and max Total Power levels
#if one state is chosen, it will be shown if still in the range otherwise a blank map will be shown
state_info_with_slider <- chosen_state_national %>% filter(Total.Power > 2089068) %>%
filter(Total.Power < 3189068)
#once an energy type is selected this data frame will contain data for either
# all states (if National) or a single state (if state chosen) for only
#the selected energy type
selected_energy_state <- chosen_state_national %>% select(State, input$type)
colnames(selected_energy_state)[2] <- 'EnergyType'
#once a company is selected this data frame will contain
#all the states which the company covers
#the state names are abbreviated in this data frame
selected_states_for_company <- company_data %>%
filter(utility_name == "City of Aberdeen") %>%
select(state)
capFirst <- function(s) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", s, perl=TRUE)
}
state_df <- map_data("state")
names(state_df) <- c("lng", "lat", "group", "order", "State", "subregion")
state_df$State <- capFirst(state_df$State)
choropleth <- inner_join(state_df, all_state_info, by = "State")
choropleth <- choropleth[!duplicated(choropleth$order), ]
p <- ggplot()
g <- p + geom_polygon(data = choropleth, aes(lng, lat, group = group, fill = Total.Power)) +
#geom_polygon(data = state_df, colour = "white", fill = NA) +
geom_point(aes(x = chosen_state_national$Longitude, y = chosen_state_national$Latitude,
text = chosen_state_national$State), colour="red", alpha = 1/2) +
geom_point(aes(text = selected_energy_state$EnergyType))
g <- ggplotly(g)
# use style to modify layer
#  p <- style(p, hoverinfo = 'text', text = paste(chosen_state_national))
# p <- ggplotly(p, tooltip = 'text', text = paste(chosen_state_national)) %>%
#   style(p, hoverinfo = 'text', text = paste(chosen_state_national))
# use plotly_build to modify layer
g <- plotly_build(g)
#str(p$x$layout$annotations) # check annotations
#p$x$layout$annotations = NULL # remove annotation
})
})
runApp()
selected_energy_state <- chosen_state_national %>% select(State, input$type, Longtiude, Latitude)
runApp()
runApp()
runApp()
runApp()
=======
state_options <- as.vector(all_state_info$State)
company_options <- unique(select(company_data, company_data$utility_name))
company_options <- as.vector(company_options$utility_name)
>>>>>>> 36ac20998c542159e25d3f98c0222e791d5c3024
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
<<<<<<< HEAD
chosen_state_national <- all_state_info %>% filter(State == "Washington")
selected_energy_state <- chosen_state_national %>% select(State, "Offshore.Wind", Longitude, Latitude)
View(selected_energy_state)
View(selected_energy_state)
colnames(selected_energy_state)[2] <- 'EnergyType'
View(selected_energy_state)
View(selected_energy_state)
select(selected_energy_state$EnergyType)
damn <- select(selected_energy_state, selected_energy_state$EnergyType)
damn <- selected_energy_state %>% select(EnergyType)
View(damn)
View(damn)
energyOutput <- as.integer(selected_energy_state %>% select(EnergyType))
runApp()
energyOutput <- paste0(as.integer(selected_energy_state %>% select(EnergyType)), "")
runApp()
energyOutput
runApp()
runApp()
=======
state_options <- as.vector(all_state_info$State)
company_options <- select(company_data, company_data$utility_name)
>>>>>>> 36ac20998c542159e25d3f98c0222e791d5c3024
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
<<<<<<< HEAD
if (input$state != 'National') {
#if a state is chosen
chosen_state_national <- all_state_info %>% filter(State == "Washington")
#chosen_state_national table will contain info only about that state
} else {
#if National is chosen
chosen_state_national <- all_state_info
#chosen_state_national table will contain info about all states
}
state_info_with_slider <- chosen_state_national %>% filter(Total.Power > 2089068) %>%
filter(Total.Power < 3189068)
state_info_with_slider <- chosen_state_national %>% filter(Total.Power > 2089068) %>%
filter(Total.Power < 3189068)
chosen_state_national <- all_state_info %>% filter(State == "Washington")
selected_energy_state <- chosen_state_national %>% select(State, "Offshore.Wind", Longitude, Latitude)
colnames(selected_energy_state)[2] <- 'EnergyType'
capFirst <- function(s) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", s, perl=TRUE)
}
state_df <- map_data("state")
names(state_df) <- c("lng", "lat", "group", "order", "State", "subregion")
state_df$State <- capFirst(state_df$State)
choropleth <- inner_join(state_df, all_state_info, by = "State")
choropleth <- choropleth[!duplicated(choropleth$order), ]
p <- ggplot()
g <- p + geom_polygon(data = choropleth, aes(lng, lat, group = group, fill = Total.Power)) +
#geom_polygon(data = state_df, colour = "white", fill = NA) +
geom_point(aes(x = selected_energy_state$Longitude, y = selected_energy_state$Latitude,
text = selected_energy_state$State, text2 = selected_energy_state$EnergyType), colour="red", alpha = 1/2)
g <- ggplotly(g)
g <- ggplotly(g)
g <- plotly_build(g)
g
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selected_energy_state$EnergyType
selected_energy_state
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
chosen_state_national <- all_state_info %>% filter(State == 'Washinton')
selected_energy_state <- chosen_state_national %>% select(State, 'Onshore.Wind', Longitude, Latitude)
runApp()
runApp()
selected_states_for_company <- company_data %>%
filter(utility_name == "City of Aberdeen")
View(selected_states_for_company)
runApp()
runApp()
runApp()
selected_states_for_company$utility_name
View(selected_energy_state)
View(selected_energy_state)
View(c_data)
runApp()
runApp()
?labs
runApp()
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
runApp()
selected_states_for_company
selected_states_for_company <- company_data %>%
filter(Utility.Name == "City of Aberdeen") %>%
select(state)
=======
state_options <- as.vector(all_state_info$State)
company_options <- company_data %>% select(utility_name)
View(company_data)
View(company_options)
>>>>>>> 36ac20998c542159e25d3f98c0222e791d5c3024
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
<<<<<<< HEAD
selected_states_for_company <- company_data %>%
filter(Utility.Name == "City of Aberdeen") %>%
select(state)
selected_states_for_company <- company_data %>%
filter(Utility.Name == "City of Aberdeen") %>%
select(State)
View(selected_states_for_company)
View(selected_states_for_company)
runApp()
library(shiny)
library(dplyr)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(plotly)
library("ggplot2")
shinyServer(function(input, output) {
=======
state_options <- as.vector(all_state_info$State)
company_options <- company_data %>% select(utility_name)
company_options <- as.vector(company_options$utility_name)
>>>>>>> 36ac20998c542159e25d3f98c0222e791d5c3024
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
<<<<<<< HEAD
output$map <- renderPlotly({
#input$type for energy
#input$company for companies
#input$state for states
#input$power for power
#by default the option chosen will be National
if (input$state != 'National') {
#if a state is chosen
chosen_state_national <- all_state_info %>% filter(State == input$state)
#chosen_state_national table will contain info only about that state
} else {
#if National is chosen
chosen_state_national <- all_state_info
#chosen_state_national table will contain info about all states
}
#the name of the data frame created, whether a state is chosen or National, will be the same
#when national is chosen states are filtered out according to the slider's min and max Total Power levels
#if one state is chosen, it will be shown if still in the range otherwise a blank map will be shown
state_info_with_slider <- chosen_state_national %>% filter(Total.Power > 2089068) %>%
filter(Total.Power < 3189068)
#once an energy type is selected this data frame will contain data for either
# all states (if National) or a single state (if state chosen) for only
#the selected energy type
selected_energy_state <- chosen_state_national %>% select(State, input$type, Longitude, Latitude)
colnames(selected_energy_state)[2] <- 'EnergyType'
#once a company is selected this data frame will contain
#all the states which the company covers
#the state names are abbreviated in this data frame
selected_states_for_company <- company_data %>%
filter(Utility.Name == "City of Aberdeen") %>%
select(State)
capFirst <- function(s) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", s, perl=TRUE)
}
state_df <- map_data("state")
names(state_df) <- c("lng", "lat", "group", "order", "State", "subregion")
state_df$State <- capFirst(state_df$State)
choropleth <- inner_join(state_df, all_state_info, by = "State")
choropleth <- choropleth[!duplicated(choropleth$order), ]
p <- ggplot()
g <- p + geom_polygon(data = choropleth, aes(lng, lat, group = group, fill = Total.Power)) +
#geom_polygon(data = state_df, colour = "white", fill = NA) +
geom_point(aes(x = selected_energy_state$Longitude, y = selected_energy_state$Latitude,
text = selected_energy_state$State, text2 = selected_energy_state$EnergyType),
colour="red", alpha = 1/2)
# geom_point(aes(text = selected_states_for_company$Utility.Name))
g <- ggplotly(g)
# use style to modify layer
#  p <- style(p, hoverinfo = 'text', text = paste(chosen_state_national))
# p <- ggplotly(p, tooltip = 'text', text = paste(chosen_state_national)) %>%
#   style(p, hoverinfo = 'text', text = paste(chosen_state_national))
# use plotly_build to modify layer
g <- plotly_build(g)
#str(p$x$layout$annotations) # check annotations
#p$x$layout$annotations = NULL # remove annotation
})
})
=======
state_options <- as.vector(all_state_info$State)
company_options <- company_data %>% select(utility_name)
company_options <- unique(as.vector(company_options$utility_name))
energy_options <- colnames(all_state_info)[3:11]
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
state_options <- as.vector(all_state_info$State)
company_options <- company_data %>% select(utility_name)
company_options <- unique(as.vector(company_options$utility_name))
View(company_data)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/INFO 201/Assignments/Energy")
runApp()
runApp()
runApp()
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
national_option <- c("National")
state_options <- as.vector(all_state_info$State)
state_options <- append(national_option, state_options)
install.packages("plotly")
>>>>>>> 36ac20998c542159e25d3f98c0222e791d5c3024
runApp()
shiny::runApp()
install.packages(plotly)
install.packages("plotly")
runApp()
runApp()
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
capFirst <- function(s) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", s, perl=TRUE)
}
state_df <- map_data("state")
names(state_df) <- c("lng", "lat", "group", "order", "State", "subregion")
state_df$State <- capFirst(state_df$State)
choropleth <- inner_join(state_df, all_state_info, by = "State")
choropleth <- choropleth[!duplicated(choropleth$order), ]
chosen_state_national <- all_state_info %>% filter(State == "Washington")
selected_energy_state <- chosen_state_national %>% select(State, Total.Power, Longitude, Latitude)
colnames(selected_energy_state)[2] <- 'EnergyType'
choropleth2 <- choropleth %>% select(lng, lat, State, Total.Power, group)
colnames(choropleth2)[4] <- 'SelectedEnergyType'
selected_states_for_company <- company_data %>%
filter(Utility.Name == input$company)
stateCompany <- all_state_info %>%
filter(all_state_info$State == selected_states_for_company$State)
companyInfo <- inner_join(stateCompany, selected_states_for_company, by = "State")
companyInfo <- inner_join(stateCompany, selected_states_for_company, by = "State")
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType)) +
#geom_point(aes(x = companyInfo$Longitude, y = companyInfo$Latitude,
#           text = companyInfo$Utility.Name),
#            colour="red", alpha = 1/2, size=3) +
geom_point(data = chosen_state_national, aes(x = Longitude, y = Latitude), colour = 'white') +
xlab('Longitude') +
ylab('Latitude')
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType)) +
#geom_point(aes(x = companyInfo$Longitude, y = companyInfo$Latitude,
#           text = companyInfo$Utility.Name),
#            colour="red", alpha = 1/2, size=3) +
geom_point(data = chosen_state_national, aes(x = Longitude, y = Latitude), colour = 'white') +
xlab('Longitude') +
ylab('Latitude')
g <- ggplotly(g)
g <- plotly_build(g)
output$energyTable <- DT::renderDataTable({all_state_info})
g
runApp()
runApp()
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType))
g <- ggplotly(g)
g <- plotly_build(g)
output$map <- renderPlotly({
#input$type for energy
#input$company for companies
#input$state for states
#input$power for power
capFirst <- function(s) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", s, perl=TRUE)
}
state_df <- map_data("state")
names(state_df) <- c("lng", "lat", "group", "order", "State", "subregion")
state_df$State <- capFirst(state_df$State)
choropleth <- inner_join(state_df, all_state_info, by = "State")
choropleth <- choropleth[!duplicated(choropleth$order), ]
#by default the option chosen will be National
#if (input$state != 'National') {
#if a state is chosen
chosen_state_national <- all_state_info %>% filter(State == "Washington")
#chosen_state_national table will contain info only about that state
#} else {
#if National is chosen
#  chosen_state_national <- all_state_info
#chosen_state_national table will contain info about all states
#}
#the name of the data frame created, whether a state is chosen or National, will be the same
#when national is chosen states are filtered out according to the slider's min and max Total Power levels
#if one state is chosen, it will be shown if still in the range otherwise a blank map will be shown
state_info_with_slider <- chosen_state_national %>% filter(Total.Power > input$power) %>%
filter(Total.Power < input$power)
#once an energy type is selected this data frame will contain data for either
# all states (if National) or a single state (if state chosen) for only
#the selected energy type
selected_energy_state <- chosen_state_national %>% select(State, Total.Power, Longitude, Latitude)
colnames(selected_energy_state)[2] <- 'EnergyType'
choropleth2 <- choropleth %>% select(lng, lat, State, Total.Power, group)
colnames(choropleth2)[4] <- 'SelectedEnergyType'
#once a company is selected this data frame will contain
#all the states which the company covers
#the state names are abbreviated in this data frame
selected_states_for_company <- company_data %>%
filter(Utility.Name == input$company)
stateCompany <- all_state_info %>%
filter(all_state_info$State == selected_states_for_company$State)
companyInfo <- inner_join(stateCompany, selected_states_for_company, by = "State")
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType))
#geom_point(aes(x = companyInfo$Longitude, y = companyInfo$Latitude,
#           text = companyInfo$Utility.Name),
#            colour="red", alpha = 1/2, size=3) +
# geom_point(data = chosen_state_national, aes(x = Longitude, y = Latitude), colour = 'white') +
# xlab('Longitude') +
#  ylab('Latitude')
g <- ggplotly(g)
g <- plotly_build(g)
})
output$energyTable <- DT::renderDataTable({all_state_info})
runApp()
g
View(choropleth2)
View(choropleth2)
runApp()
runApp()
chosen_state_national <- all_state_info %>% filter(State == "Washington")
chosen_state_national <- all_state_info %>% filter(State == "Washington")
state_data <- read.csv("data/stateEnergyData.csv", stringsAsFactors = FALSE)
c_data <- read.csv("data/companies_and_state.csv", stringsAsFactors = FALSE)
company_data <- c_data %>% distinct()
state_coords <- read.csv("data/States_Coordinates.csv", stringsAsFactors = FALSE)
all_state_info <- full_join(state_data, state_coords, by = "State") %>%
select(State, Total.Power, Photovoltaic, Concentrated.Solar.Power, Onshore.Wind, Offshore.Wind,
Biopower.Solid, Biopower.Gaseous, Geothermal.Hydrothermal,
EGS.Geothermal, Hydropower, Latitude, Longitude)
capFirst <- function(s) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", s, perl=TRUE)
}
state_df <- map_data("state")
names(state_df) <- c("lng", "lat", "group", "order", "State", "subregion")
state_df$State <- capFirst(state_df$State)
choropleth <- inner_join(state_df, all_state_info, by = "State")
choropleth <- choropleth[!duplicated(choropleth$order), ]
chosen_state_national <- all_state_info %>% filter(State == "Washington")
selected_energy_state <- chosen_state_national %>% select(State, Total.Power, Longitude, Latitude)
colnames(selected_energy_state)[2] <- 'EnergyType'
choropleth2 <- choropleth %>% select(lng, lat, State, Total.Power, group)
colnames(choropleth2)[4] <- 'SelectedEnergyType'
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType))
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType)) +
#geom_point(aes(x = companyInfo$Longitude, y = companyInfo$Latitude,
#           text = companyInfo$Utility.Name),
#            colour="red", alpha = 1/2, size=3) +
geom_point(data = chosen_state_national, aes(x = Longitude, y = Latitude), colour = 'white') +
#xlab('Longitude') +
#  ylab('Latitude')
g <- ggplotly(g)
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType)) +
#geom_point(aes(x = companyInfo$Longitude, y = companyInfo$Latitude,
#           text = companyInfo$Utility.Name),
#            colour="red", alpha = 1/2, size=3) +
geom_point(data = chosen_state_national, aes(x = Longitude, y = Latitude), colour = 'white')
g <- ggplotly(g)
g <- plotly_build(g)
g
runApp()
runApp()
View(chosen_state_national)
View(chosen_state_national)
state_info_with_slider <- chosen_state_national %>% filter(Total.Power > 3089067) %>%
filter(Total.Power < 3089069)
selected_energy_state <- chosen_state_national %>% select(State, Total.Power, Longitude, Latitude)
colnames(selected_energy_state)[2] <- 'EnergyType'
choropleth2 <- choropleth %>% select(lng, lat, State, Total.Power, group)
colnames(choropleth2)[4] <- 'SelectedEnergyType'
p <- ggplot()
g <- p + geom_polygon(data = choropleth2, aes(lng, lat, group = group, fill = SelectedEnergyType)) +
#geom_point(aes(x = companyInfo$Longitude, y = companyInfo$Latitude,
#           text = companyInfo$Utility.Name),
#            colour="red", alpha = 1/2, size=3) +
geom_point(data = chosen_state_national, aes(x = Longitude, y = Latitude), colour = 'white')
g <- ggplotly(g)
g <- plotly_build(g)
g <- ggplotly(g)
g <- plotly_build(g)
runApp()
runApp()
runApp()
runApp()
runApp()
